#summary How to use the server

To run the server, use
{{{
import nxt.server
nxt.server.serve_forever()
}}}
or just double click on server.py in site-packages.

This is an example that uses the server:
{{{
import socket

insock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
outsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
insock.bind(('localhost', 54374)) #If you are running the server on a different computer, change localhost to the IP of that computer.

while 1:
    command = raw_input('nxt> ')
    outsock.sendto(command, ('localhost', 54174)) #change it here, too
    retvals, addr = insock.recvfrom(1024)
    retcode = retvals[0]
    retmsg = retvals[1:retvals.index('~')]
    print 'Return code: '+retcode
    print 'Return message: '+retmsg
}}}
This will bring up a prompt (`nxt>`). These are the available commands:
|| *Name* || *Effect* || *Syntax Example* ||
|| find_brick || Looks for a brick and connects to it if it can || find_brick ||
|| get_touch_sample || Gets a sample from the port specified || get_touch_sample:1 ||
|| get_sound_sample || Gets a sample from the port specified || get_sound_sample:1 ||
|| get_light_sample || Gets a sample from the port specified || get_light_sample:1 ||
|| get_ultrasonic_sample || Gets a sample from the port specified || get_ultrasonic_sample:1 ||
|| update_motor || Updates a motor with the port, power, and tacholimit specified || update_motor:a,100,300 ||
|| play_tone || Plays a tone of the frequency and duration specified || play_tone:500,100 ||
|| close_brick || Closes the connection to the brick || close_brick ||

For each command, it returns a datagram in the syntax of errorcode (0 is success, 1 is failure), then a message with '~' at the end of it. For everything except sensors, there is no success message. All error messages are gotten from `str(sys.exc_info()[1])`. You will get an error if you do anything before you do find_brick.